####load libraries ########  
library(readr)
library(TCGAbiolinks)
library(DESeq2)
library(dplyr)



#########loading prostate caner RNA-Seq from TCGA data base###########


##building query data

gdc_query = GDCquery(
  project = "TCGA-PRAD",
  data.category = 'Transcriptome Profiling',
  experimental.strategy = 'RNA-Seq',
  workflow.type = 'STAR - Counts',
  access = 'open')

save(gdc_query ,file = "GDCquery")

results<- getResults(gdc_query)


#downlaod the data 

GDCdownload(gdc_query)

#prepare the data

TCGA_data <- GDCprepare(gdc_query, summarizedExperiment = TRUE)

data_matrix <- assay(TCGA_data, 'unstranded')

rowData <- rowData(TCGA_data)

colData <-  colData(TCGA_data)



#considering protein coding gene only 
protein_coding = rownames(as.data.frame(rowData) %>% filter(., gene_type =='protein_coding' ))
exp_matrix <- data_matrix[protein_coding,]


####### Data filteration ####################################

# check duplciation
x=duplicated(rowData[rownames(exp_matrix),]$gene_name) 
sum(x)

#aggregation of duplicated genes

rownames(exp_matrix) <- rowData[rownames(exp_matrix),]$gene_name
exp_matrix_agg= aggregate(exp_matrix, list(rownames(exp_matrix)),FUN=max)
genes=exp_matrix_agg$Group.1
exp_matrix_agg=exp_matrix_agg[-1]
exp_matrix_agg=apply(exp_matrix_agg,2, as.numeric)
exp_matrix_agg=round(exp_matrix_agg)
rownames(exp_matrix_agg)=genes



# Calculate total read counts per gene/transcript
total_counts <- rowSums(exp_matrix_agg)

# Set a threshold for minimum read counts (adjust as needed)
min_counts_threshold <- 100

# Filter genes/transcripts based on minimum read counts
filtered_data <- ex_matrix_agg[total_counts >= min_counts_threshold, ]

