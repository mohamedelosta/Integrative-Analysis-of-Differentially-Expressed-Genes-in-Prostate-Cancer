####load libraries ########  
library(readr)
library(org.Hs.eg.db)
library("vsn")
library(DESeq2)
library(dplyr)
library(TCGAbiolinks)




#########loading prostate caner RNA-Seq from TCGA data base###########


##building query data

gdc.query = GDCquery(
  project = "TCGA-PRAD",
  data.category = 'Transcriptome Profiling',
  experimental.strategy = 'RNA-Seq',
  workflow.type = 'STAR - Counts',
  access = 'open')

save(gdc.query ,file = "GDCquery")

results<- getResults(gdc.query)


#downlaod the data 

GDCdownload(gdc.query)

#prepare the data

TCGA.data <- GDCprepare(gdc.query, summarizedExperiment = TRUE)

data.matrix <- assay(TCGA.data, 'unstranded')

rowData <- rowData(TCGA.data)

colData <-  colData(TCGA.data)



#considering protein coding gene only 
protein_coding = rownames(as.data.frame(rowData) %>% filter(., gene_type =='protein_coding' ))
exp.matrix <- data.matrix[protein_coding,]


####### Data filteration ####################################

# check duplciation
x=duplicated(rowData[rownames(exp.matrix),]$gene_name) 
sum(x)

#aggregation of duplicated genes

rownames(exp.matrix) <- rowData[rownames(exp.matrix),]$gene_name
exp.matrix.agg= aggregate(exp.matrix, list(rownames(exp.matrix)),FUN=max)
genes=exp.matrix.agg$Group.1
exp.matrix.agg=exp.matrix.agg[-1]
exp.matrix.agg=apply(exp.matrix.agg,2, as.numeric)
exp.matrix.agg=round(exp.matrix.agg)
rownames(exp.matrix.agg)=genes



# Calculate total read counts per gene/transcript
total_counts <- rowSums(exp.matrix.agg)

# Set a threshold for minimum read counts (adjust as needed)
min_counts_threshold <- 100

# Filter genes/transcripts based on minimum read counts
filtered_data <- exp.matrix.agg[total_counts >= min_counts_threshold, ]

